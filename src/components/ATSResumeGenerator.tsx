'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/Button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import { Textarea } from '@/components/ui/Textarea'
import { Input } from '@/components/ui/Input'
import { Sparkles, Download, Copy, CheckCircle, AlertCircle } from 'lucide-react'

interface GeneratedResume {
  professionalSummary: string
  workExperience: Array<{
    company: string
    position: string
    duration: string
    bulletPoints: string[]
  }>
  skills: {
    technical: string[]
    soft: string[]
    certifications: string[]
  }
  education: string
  projects: string
  atsScore: string
  keywords: string[]
  recommendations: string
}

export function ATSResumeGenerator() {
  const [userData, setUserData] = useState('')
  const [jobDescription, setJobDescription] = useState('')
  const [generatedResume, setGeneratedResume] = useState<GeneratedResume | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [copied, setCopied] = useState(false)

  const handleGenerateResume = async () => {
    if (!userData.trim()) {
      setError('Please provide your resume data')
      return
    }

    setIsLoading(true)
    setError('')

    try {
      const response = await fetch('/api/ai/generate-resume', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userData: JSON.parse(userData),
          jobDescription: jobDescription || undefined,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.message || 'Failed to generate resume')
      }

      const data = await response.json()
      setGeneratedResume(data.resume)
    } catch (error) {
      console.error('Error generating resume:', error)
      setError(error instanceof Error ? error.message : 'Failed to generate resume')
    } finally {
      setIsLoading(false)
    }
  }

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      console.error('Failed to copy to clipboard:', error)
    }
  }

  const downloadResume = () => {
    if (!generatedResume) return

    const resumeText = `
ATS-OPTIMIZED RESUME
Generated by ResumeAI

PROFESSIONAL SUMMARY
${generatedResume.professionalSummary}

WORK EXPERIENCE
${generatedResume.workExperience.map(exp => `
${exp.position} | ${exp.company} | ${exp.duration}
${exp.bulletPoints.map(bullet => `• ${bullet}`).join('\n')}
`).join('\n')}

SKILLS
Technical: ${generatedResume.skills.technical.join(', ')}
Soft Skills: ${generatedResume.skills.soft.join(', ')}
Certifications: ${generatedResume.skills.certifications.join(', ')}

EDUCATION
${generatedResume.education}

PROJECTS
${generatedResume.projects}

ATS SCORE: ${generatedResume.atsScore}
KEYWORDS: ${generatedResume.keywords.join(', ')}

RECOMMENDATIONS
${generatedResume.recommendations}
    `.trim()

    const blob = new Blob([resumeText], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'ats-optimized-resume.txt'
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center text-gray-900">
            <Sparkles className="w-5 h-5 mr-2 text-blue-600" />
            ATS Resume Generator
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4 text-gray-900">
          <div>
            <label className="block text-sm font-medium mb-2">
              Your Resume Data (JSON format)
            </label>
            <Textarea
              placeholder='{"personalInfo": {"firstName": "John", "lastName": "Doe", "email": "john@example.com"}, "experiences": [{"company": "Tech Corp", "position": "Software Engineer", "startDate": "2020-01", "endDate": "2023-12", "description": "Developed web applications"}], "skills": [{"name": "JavaScript", "category": "technical"}], "education": [{"institution": "University", "degree": "Computer Science"}]}'
              value={userData}
              onChange={(e) => setUserData(e.target.value)}
              rows={8}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Target Job Description (Optional)
            </label>
            <Textarea
              placeholder="Paste the job description here to optimize your resume for this specific role..."
              value={jobDescription}
              onChange={(e) => setJobDescription(e.target.value)}
              rows={4}
            />
          </div>

          {error && (
            <div className="flex items-center p-3 bg-red-50 border border-red-200 rounded-md">
              <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
              <span className="text-red-700">{error}</span>
            </div>
          )}

          <Button
            onClick={handleGenerateResume}
            disabled={isLoading || !userData.trim()}
            className="w-full"
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Generating ATS-Optimized Resume...
              </>
            ) : (
              <>
                <Sparkles className="w-4 h-4 mr-2" />
                Generate ATS-Optimized Resume
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {generatedResume && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center text-gray-900">
                <CheckCircle className="w-5 h-5 mr-2 text-green-600" />
                Generated ATS-Optimized Resume
              </CardTitle>
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => copyToClipboard(JSON.stringify(generatedResume, null, 2))}
                >
                  {copied ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                  {copied ? 'Copied!' : 'Copy JSON'}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={downloadResume}
                >
                  <Download className="w-4 h-4 mr-1" />
                  Download
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-6 text-gray-900">
            {/* ATS Score */}
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-blue-900">ATS Optimization Score</h3>
                <div className="flex items-center space-x-2">
                  <div className="text-2xl font-bold text-blue-800">{generatedResume.atsScore}</div>
                  <span className="text-sm text-blue-600">/100</span>
                </div>
              </div>
              <div className="w-full bg-blue-200 rounded-full h-3">
                <div 
                  className="h-3 bg-blue-600 rounded-full transition-all duration-1000"
                  style={{ width: `${parseInt(generatedResume.atsScore) || 0}%` }}
                ></div>
              </div>
              <p className="text-sm text-blue-700 mt-2">
                {parseInt(generatedResume.atsScore) >= 80 ? 'Excellent ATS optimization!' :
                 parseInt(generatedResume.atsScore) >= 60 ? 'Good ATS score, room for improvement.' :
                 'Needs more ATS optimization.'}
              </p>
            </div>

            {/* Professional Summary */}
            <div>
              <h3 className="font-semibold mb-2">Professional Summary</h3>
              <p className="text-gray-700">{generatedResume.professionalSummary}</p>
            </div>

            {/* Work Experience */}
            <div>
              <h3 className="font-semibold mb-2">Work Experience</h3>
              <div className="space-y-4">
                {generatedResume.workExperience.map((exp, index) => (
                  <div key={index} className="border-l-4 border-blue-200 pl-4">
                    <h4 className="font-medium">{exp.position} | {exp.company}</h4>
                    <p className="text-sm text-gray-600 mb-2">{exp.duration}</p>
                    <ul className="space-y-1">
                      {exp.bulletPoints.map((bullet, bulletIndex) => (
                        <li key={bulletIndex} className="text-sm text-gray-700">
                          • {bullet}
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>

            {/* Skills */}
            <div>
              <h3 className="font-semibold mb-2">Skills</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <h4 className="font-medium text-sm text-gray-600 mb-1">Technical</h4>
                  <p className="text-sm">{generatedResume.skills.technical.join(', ')}</p>
                </div>
                <div>
                  <h4 className="font-medium text-sm text-gray-600 mb-1">Soft Skills</h4>
                  <p className="text-sm">{generatedResume.skills.soft.join(', ')}</p>
                </div>
                <div>
                  <h4 className="font-medium text-sm text-gray-600 mb-1">Certifications</h4>
                  <p className="text-sm">{generatedResume.skills.certifications.join(', ')}</p>
                </div>
              </div>
            </div>

            {/* Keywords */}
            <div>
              <h3 className="font-semibold mb-2">Optimized Keywords</h3>
              <div className="flex flex-wrap gap-2">
                {generatedResume.keywords.map((keyword, index) => (
                  <span
                    key={index}
                    className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full"
                  >
                    {keyword}
                  </span>
                ))}
              </div>
            </div>

            {/* Recommendations */}
            <div>
              <h3 className="font-semibold mb-2">Recommendations</h3>
              <p className="text-gray-700">{generatedResume.recommendations}</p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
