// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  resumes Resume[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id          String   @id @default(cuid())
  title       String
  template    String   @default("classic")
  isPublic    Boolean  @default(false)
  shareToken  String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  personalInfo PersonalInfo?
  experiences  Experience[]
  education    Education[]
  skills       Skill[]
  projects     Project[]
  comments     Comment[]
}

model PersonalInfo {
  id          String  @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String?
  location    String?
  website     String?
  linkedin    String?
  github      String?
  summary     String?
  resumeId    String  @unique
  resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(cuid())
  company     String
  position    String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  description String?
  order       Int      @default(0)
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  institution String
  degree      String
  field       String?
  location    String?
  startDate   DateTime
  endDate     DateTime?
  gpa         String?
  description String?
  order       Int      @default(0)
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String @id @default(cuid())
  name      String
  level     Int    @default(3) // 1-5 scale
  category  String @default("technical")
  order     Int    @default(0)
  resumeId  String
  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  technologies String?
  url         String?
  githubUrl   String?
  startDate   DateTime?
  endDate     DateTime?
  order       Int      @default(0)
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    String
  createdAt DateTime @default(now())
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}
